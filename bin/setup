#!/usr/bin/env bash

# we handle errors using  run::set-all abort-on-error below

export BUNDLER_DEFAULT_VERSION="2.1.2"

set +e

# install BASH dependencies
function setup::bash() {
  [[ -x bin/deps ]] && source "bin/deps"
  run::set-all abort-on-error
  [[ -x bin/setup && -f WORKSPACE ]] || {
    printf "Please run this script from the WORKSPACE root.\n"
    exit 1
  }

  export ProjectRoot=$(pwd -P)
}

function setup::rubocop() {
  # abort on error
  run::set-all abort-on-error
  hl::subtle "Installing Globally rubocop gems..."

  run "bundle_check || bundle install"

  run "cd ruby/gems/hello_world"
  run "bundle_check || bundle install"

  run "cd ../../../ruby/apps/hello-world-web"
  run "bundle_check || bundle install"

  run "cd ${ProjectRoot}"
}

__setup::gemfile-bundle-version() {
  if tail -2 Gemfile.lock | grep -q BUNDLED; then
    tail -1 Gemfile.lock | tr -d ' '
  else
    printf ${BUNDLER_DEFAULT_VERSION}
  fi
}

function setup::upgrade-rubygems() {
  local rubygems_major_version
  gem_version_i=$(lib::util::ver-to-i $(gem --version))
  if [[ ${gem_version_i} -lt 103001002 ]]; then
    run "gem update --system"
  fi

  local bundler_version=0
  local bundler_target_version="$(lib::util::ver-to-i $(__setup::gemfile-bundle-version))"
  if [[ -n $(command -v bundler) ]]; then
    bundler_version=$(lib::util::ver-to-i $(bundle --version | tr -d '[a-zA-Z ]'))
    [[ ${bundler_version} -lt ${bundler_target_version} ]] && run "gem update bundler --no-doc"
  else
    run "gem install bundler"
  fi
}

function setup::hook() {
  [[ -L .git/hooks/pre-commit ]] || {
    hl::subtle "Configuring your pre-commit git hook..."
    run "ln -nfs bin/pre-commit .git/hooks/pre-commit"
  }
}

function setup::xcode() {
  run "xcode-select --install 2>/dev/null || true"
  run "sudo xcodebuild -license accept"
}

function setup::bazel::darwin() {
  brew info bazelbuild/tap/bazelisk 2>/dev/null || {
    run "brew tap bazelbuild/tap"
    lib::brew::package::install bazelbuild/tap/bazelisk
    run "brew link --overwrite bazel || true"
  }

  if [[ -n $(command -v bazel) ]]; then
    success "Installed bazel version $(bazel --version)"
  else
    error "Still can't find bazel, something must have gone wrong."
    exit 1
  fi

  setup::xcode
}

function setup::bazel::linux() {
  run "sudo apt update -y || true"
  run "sudo apt-get install -y libreadline-dev zlib1g-dev"
  run "sudo curl -L -o /usr/bin/bazel https://github.com/bazelbuild/bazelisk/releases/download/v1.0/bazelisk-linux-amd64"
  run "sudo chmod +x /usr/bin/bazel"
}

function setup::bazel() {
  local os
  os="$(uname -s | tr '[:upper:]' '[:lower:]')"
  info "You may be asked to enter your password for sudo..."
  sudo true
  local func="setup::bazel::${os}"
  if lib::util::is-a-function "${func}"; then
    eval "${func}"
  else
    error "Operating System $(uname -s) is not currently supported."
  fi
}

function setup::ruby() {
  setup::upgrade-rubygems
  setup::rubocop
}

function setup::main() {
  local action="$1"
  func="setup::${action}"

  if [[ -n ${action} ]]; then
    lib::util::is-a-function "${func}" && {
      h1 "Executing partial setup only: ${bldylw}${func}"
      ${func}
    }

    return $?
  else
    setup::ruby
    setup::bazel

    [[ -n ${CI} ]] || setup::hook

    success "Your repo is now ready for bazel." "Run 'bazel build //...:all' to build it."

    return 0
  fi
}

setup::bash

# Only execute main() if we were run as a script, not sourced in.
bashmatic::validate-subshell 2>/dev/null && setup::main "$@"


